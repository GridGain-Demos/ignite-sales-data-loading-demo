package com.gridgain.sales.config;

import com.gridgain.sales.load.SalesCacheLoadOnlyStore;
import com.gridgain.sales.model.Customer;
import com.gridgain.sales.model.Employee;
import com.gridgain.sales.model.Office;
import com.gridgain.sales.model.Order;
import com.gridgain.sales.model.OrderDetail;
import com.gridgain.sales.model.OrderDetailKey;
import com.gridgain.sales.model.Payment;
import com.gridgain.sales.model.PaymentKey;
import com.gridgain.sales.model.Product;
import com.gridgain.sales.model.ProductLine;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Properties;
import javax.cache.configuration.FactoryBuilder;

import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.QueryEntity;
import org.apache.ignite.cache.QueryIndex;
import org.apache.ignite.cache.QueryIndexType;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.DataRegionConfiguration;
import org.apache.ignite.configuration.DataStorageConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;

/** This file was generated by Ignite Web Console (04/23/2020, 16:26) **/
public class ClientConfigurationFactory {
    /** Secret properties loading. **/
    private static final Properties props = new Properties();

    static {
        try (InputStream in = IgniteConfiguration.class.getClassLoader().getResourceAsStream("sales.properties")) {
            props.load(in);
        }
        catch (Exception ignored) {
            // No-op.
        }
    }

    /**
     * Configure grid.
     * 
     * @return Ignite configuration.
     * @throws Exception If failed to construct Ignite configuration instance.
     **/
    public static IgniteConfiguration createConfiguration() throws Exception {
        IgniteConfiguration cfg = new IgniteConfiguration();

        cfg.setClientMode(true);
        cfg.setIgniteInstanceName("sales");

        TcpDiscoverySpi discovery = new TcpDiscoverySpi();
        TcpDiscoveryVmIpFinder ipFinder = new TcpDiscoveryVmIpFinder();
        ipFinder.setAddresses(Arrays.asList("127.0.0.1:31500..31510"));
        discovery.setIpFinder(ipFinder);
        cfg.setDiscoverySpi(discovery);

        // Done below in Cache Config
        // cfg.setCacheKeyConfiguration(new CacheKeyConfiguration[] {
        //     new CacheKeyConfiguration("com.gridgain.sales.model.OrderDetailKey", "ordernumber")
        // });

        DataStorageConfiguration dataStorageCfg = new DataStorageConfiguration();
        DataRegionConfiguration dataRegionCfg = new DataRegionConfiguration();
        dataRegionCfg.setPersistenceEnabled(true);
        dataStorageCfg.setDefaultDataRegionConfiguration(dataRegionCfg);
        cfg.setDataStorageConfiguration(dataStorageCfg);

        cfg.setCacheConfiguration(
            cacheOfficeCache(),
            cacheEmployeeCache(),
            cacheCustomerCache(),
            cacheProductLineCache(),
            cacheProductCache(),
            cacheOrderCache(),
            cacheOrderDetailCache(),
            cachePaymentCache()
        );

        // GridGain Only Feature
        // GridGainConfiguration ggCfg = new GridGainConfiguration();
        // SnapshotConfiguration snapshotCfg = new SnapshotConfiguration();
        // snapshotCfg.setPointInTimeRecoveryEnabled(true);
        // ggCfg.setSnapshotConfiguration(snapshotCfg);
        // cfg.setPluginConfigurations(ggCfg);

        return cfg;
    }

    /**
     * Create configuration for cache "OfficeCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheOfficeCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("OfficeCache");
        ccfg.setCacheMode(CacheMode.REPLICATED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("SALES");

        SalesCacheLoadOnlyStore<String, Office> cacheStoreFactory = new SalesCacheLoadOnlyStore<String, Office>("/data/sales/office.csv");
        ccfg.setCacheStoreFactory(FactoryBuilder.factoryOf(cacheStoreFactory));
        ccfg.setReadThrough(false);
        ccfg.setWriteThrough(false);
        // ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.gridgain.sales.model.Office");
        qryEntity.setKeyFieldName("officecode");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("officecode");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("city", "java.lang.String");
        fields.put("phone", "java.lang.String");
        fields.put("addressline1", "java.lang.String");
        fields.put("addressline2", "java.lang.String");
        fields.put("state", "java.lang.String");
        fields.put("country", "java.lang.String");
        fields.put("postalcode", "java.lang.String");
        fields.put("territory", "java.lang.String");
        fields.put("officecode", "java.lang.String");

        qryEntity.setFields(fields);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create configuration for cache "EmployeeCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheEmployeeCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("EmployeeCache");
        ccfg.setCacheMode(CacheMode.REPLICATED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("SALES");

        SalesCacheLoadOnlyStore<Integer, Employee> cacheStoreFactory = new SalesCacheLoadOnlyStore<Integer, Employee>("/data/sales/employee.csv");
        ccfg.setCacheStoreFactory(FactoryBuilder.factoryOf(cacheStoreFactory));
        ccfg.setReadThrough(false);
        ccfg.setWriteThrough(false);
        // ccfg.setEagerTtl(true);


        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.gridgain.sales.model.Employee");
        qryEntity.setKeyFieldName("employeenumber");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("employeenumber");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("lastname", "java.lang.String");
        fields.put("firstname", "java.lang.String");
        fields.put("extension", "java.lang.String");
        fields.put("email", "java.lang.String");
        fields.put("officecode", "java.lang.String");
        fields.put("reportsto", "java.lang.Integer");
        fields.put("jobtitle", "java.lang.String");
        fields.put("employeenumber", "java.lang.Integer");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("officeCode");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("officecode", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("reportsTo");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("reportsto", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create configuration for cache "CustomerCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheCustomerCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CustomerCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setBackups(1);
        ccfg.setReadFromBackup(true);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("SALES");

        SalesCacheLoadOnlyStore<Integer, Customer> cacheStoreFactory = new SalesCacheLoadOnlyStore<Integer, Customer>("/data/sales/customer.csv");
        ccfg.setCacheStoreFactory(FactoryBuilder.factoryOf(cacheStoreFactory));
        ccfg.setReadThrough(false);
        ccfg.setWriteThrough(false);
        // ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.gridgain.sales.model.Customer");
        qryEntity.setKeyFieldName("customernumber");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("customernumber");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("customername", "java.lang.String");
        fields.put("contactlastname", "java.lang.String");
        fields.put("contactfirstname", "java.lang.String");
        fields.put("phone", "java.lang.String");
        fields.put("addressline1", "java.lang.String");
        fields.put("addressline2", "java.lang.String");
        fields.put("city", "java.lang.String");
        fields.put("state", "java.lang.String");
        fields.put("postalcode", "java.lang.String");
        fields.put("country", "java.lang.String");
        fields.put("salesrepemployeenumber", "java.lang.Integer");
        fields.put("creditlimit", "java.math.BigDecimal");
        fields.put("customernumber", "java.lang.Integer");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("salesRepEmployeeNumber");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("salesrepemployeenumber", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create configuration for cache "ProductLineCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheProductLineCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("ProductLineCache");
        ccfg.setCacheMode(CacheMode.REPLICATED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("SALES");

        SalesCacheLoadOnlyStore<String, ProductLine> cacheStoreFactory = new SalesCacheLoadOnlyStore<String, ProductLine>("/data/sales/productline.csv");
        ccfg.setCacheStoreFactory(FactoryBuilder.factoryOf(cacheStoreFactory));
        ccfg.setReadThrough(false);
        ccfg.setWriteThrough(false);
        // ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.gridgain.sales.model.ProductLine");
        qryEntity.setKeyFieldName("productline");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("productline");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("textdescription", "java.lang.String");
        fields.put("htmldescription", "java.lang.String");
        fields.put("image", "[B");
        fields.put("productline", "java.lang.String");

        qryEntity.setFields(fields);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create configuration for cache "ProductCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheProductCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("ProductCache");
        ccfg.setCacheMode(CacheMode.REPLICATED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("SALES");

        SalesCacheLoadOnlyStore<String, Product> cacheStoreFactory = new SalesCacheLoadOnlyStore<String, Product>("/data/sales/product.csv");
        ccfg.setCacheStoreFactory(FactoryBuilder.factoryOf(cacheStoreFactory));
        ccfg.setReadThrough(false);
        ccfg.setWriteThrough(false);
        // ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("com.gridgain.sales.model.Product");
        qryEntity.setKeyFieldName("productcode");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("productcode");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("productname", "java.lang.String");
        fields.put("productline", "java.lang.String");
        fields.put("productscale", "java.lang.String");
        fields.put("productvendor", "java.lang.String");
        fields.put("productdescription", "java.lang.String");
        fields.put("quantityinstock", "java.lang.Short");
        fields.put("buyprice", "java.math.BigDecimal");
        fields.put("msrp", "java.math.BigDecimal");
        fields.put("productcode", "java.lang.String");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("productLine");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("productline", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("Product_Name_Description");
        index.setIndexType(QueryIndexType.FULLTEXT);

        indFlds = new LinkedHashMap<>();

        indFlds.put("productcode", true);
        indFlds.put("productname", true);
        indFlds.put("productdescription", true);
        indFlds.put("productvendor", true);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create configuration for cache "OrderCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheOrderCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("OrderCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setBackups(1);
        ccfg.setReadFromBackup(true);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("SALES");

        SalesCacheLoadOnlyStore<Integer, Order> cacheStoreFactory = new SalesCacheLoadOnlyStore<Integer, Order>("/data/sales/order.csv");
        ccfg.setCacheStoreFactory(FactoryBuilder.factoryOf(cacheStoreFactory));
        ccfg.setReadThrough(false);
        ccfg.setWriteThrough(false);
        // ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.gridgain.sales.model.Order");
        qryEntity.setKeyFieldName("ordernumber");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("ordernumber");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("orderdate", "java.sql.Date");
        fields.put("requireddate", "java.sql.Date");
        fields.put("shippeddate", "java.sql.Date");
        fields.put("status", "java.lang.String");
        fields.put("comments", "java.lang.String");
        fields.put("customernumber", "java.lang.Integer");
        fields.put("ordernumber", "java.lang.Integer");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("customerNumber");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("customernumber", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create configuration for cache "OrderDetailCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheOrderDetailCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("OrderDetailCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setBackups(1);
        ccfg.setReadFromBackup(true);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("SALES");

        SalesCacheLoadOnlyStore<OrderDetailKey, OrderDetail> cacheStoreFactory = new SalesCacheLoadOnlyStore<OrderDetailKey, OrderDetail>("/data/sales/orderdetail.csv");
        ccfg.setCacheStoreFactory(FactoryBuilder.factoryOf(cacheStoreFactory));
        ccfg.setReadThrough(false);
        ccfg.setWriteThrough(false);
        // ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("com.gridgain.sales.model.OrderDetailKey");
        qryEntity.setValueType("com.gridgain.sales.model.OrderDetail");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("ordernumber");

        keyFields.add("productcode");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("ordernumber", "java.lang.Integer");
        fields.put("productcode", "java.lang.String");
        fields.put("quantityordered", "java.lang.Integer");
        fields.put("priceeach", "java.math.BigDecimal");
        fields.put("orderlinenumber", "java.lang.Short");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("productCode");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("productcode", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create configuration for cache "PaymentCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cachePaymentCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("PaymentCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);
        ccfg.setBackups(1);
        ccfg.setReadFromBackup(true);
        ccfg.setCopyOnRead(true);
        ccfg.setSqlSchema("SALES");

        SalesCacheLoadOnlyStore<PaymentKey, Payment> cacheStoreFactory = new SalesCacheLoadOnlyStore<PaymentKey, Payment>("/data/sales/payment.csv");
        ccfg.setCacheStoreFactory(FactoryBuilder.factoryOf(cacheStoreFactory));
        ccfg.setReadThrough(false);
        ccfg.setWriteThrough(false);
        // ccfg.setEagerTtl(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("com.gridgain.sales.model.PaymentKey");
        qryEntity.setValueType("com.gridgain.sales.model.Payment");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("customernumber");

        keyFields.add("checknumber");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("customernumber", "java.lang.Integer");
        fields.put("checknumber", "java.lang.String");
        fields.put("paymentdate", "java.sql.Date");
        fields.put("amount", "java.math.BigDecimal");

        qryEntity.setFields(fields);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("Payment_CheckNumber_Amount");
        index.setIndexType(QueryIndexType.FULLTEXT);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("checknumber", true);
        indFlds.put("amount", true);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

}